#!/bin/bash
2>/dev/null . /usr/share/wb-hwconf-manager/functions.sh || . ./functions.sh

config_apply_changes() {
	local old_state=`mktemp`
	local state=`mktemp`
	cp "$CONFIG_STATE" "$old_state" 2>/dev/null

	local CONFIG=${1:-${CONFIG}}
	while :; do
		cp "$old_state" "$state"

		local delta="$(
			diff -uN "$old_state" <(config_parse | sort) |
			sed -rn 's/^([\+-])([^+-]\S+) /\1 \2 /p'
		)"
		[[ -z "$delta" ]] && break

		local ACTION SLOT MODULE
		while read ACTION SLOT MODULE; do
			[[ "$ACTION" == "-" ]] || continue
			[[ -n "$MODULE" ]] && {
				log "Deleting $SLOT:$MODULE"
				module_run_hook del || continue
			}
			sed -ri "/^$SLOT(\s+$MODULE|\s*)$/d" "$state"
		done <<< "$delta"

		while read ACTION SLOT MODULE; do
			[[ "$ACTION" == "+" ]] || continue
			[[ -n "$MODULE" ]] && {
				log "Adding $SLOT:$MODULE"
				module_run_hook add || continue
				module_init "$SLOT" "$MODULE"
			}
			echo "$SLOT $MODULE" >> "$state"
		done <<< "$delta"

		sort "$state" > "$old_state"
	done
		
	rm "$old_state"
	sort "$state" > "$CONFIG_STATE"
	rm "$state"

	local hook
	for hook in "${HOOKS_AFTER_CONFIG_CHANGE[@]}"; do
		log "Running hook $hook"
		$hook
	done
}

case "$1" in
	"confed-tojson")
		# Build json description of all modules in form
		# {
		# 	"id": "mod-foo",
		# 	"description": "Foo Module",
		# 	"compatible_slots": ["bar", "baz"]
		# }
		# and put it to "modules" array in the config (which is read from stdin)
		perl -e '
			while (<STDIN>) {
				print;
			}
			local $/ = undef;
			foreach $f (@ARGV) {
				$f =~ /\/([^\/.]+)\.dtso$/ and $vals{id} = "\"$1\"";
				open F, $f or die;
				binmode F;
				$file = <F>;
				close F;
				$file =~ /compatible-slots\s*=\s*(.*?);/s and
					$vals{compatible_slots} = "[$1]";
				$file =~ /description\s*=\s*(.*?);/s and
					$vals{description} = $1;

				print "{", join(",", map "\"$_\": $vals{$_}", keys %vals), "}\n";
			};
		' $MODULES/*.dtso |
		jq --slurp '.[0].modules = .[1:] | .[0]' |
		jq '.slots |= map(
			.module = (.module // "") |
			.options = (.options // {}))'
		;;
	"confed-fromjson")
		tmp=`mktemp`
		# Remove "modules" array
		jq 'del(.modules)' > "$tmp"
		
		# stdout+stderr must be JSON, so redirect logging to syslog
		SYSLOG="yes"
		catch_output config_apply_changes "$tmp"
		
		cat "$tmp"
		rm "$tmp"
		;;
	"init")
		module_init $2 $3
		;;
	"deinit")
		module_deinit $2
		;;
	"config-apply")
		config_apply_changes
		;;
	*)
		>&2 cat <<EOF
Usage: $0 <command>

Commands:
  confed-tojson          Prepare config passed to stdin for the web editor
  confed-fromjson        Prepare edited config for saving
  init <slot> <module>   Initialize module plugged to the slot
  deinit <slot>          Deinitialize any module plugged to the slot
  config-apply           Run modules add/remove hooks when config is changed
EOF
		;;
esac
